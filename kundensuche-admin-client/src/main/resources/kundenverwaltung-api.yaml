openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /kunden/create:
    put:
      tags:
      - kunden-controller
      operationId: createKunden
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Kunde'
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /kunde/create:
    post:
      tags:
      - kunden-controller
      operationId: createKunde
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Kunde'
        required: true
      responses:
        "201":
          description: Created
          content:
            '*/*':
              schema:
                type: string
  /suggestVorname:
    get:
      tags:
      - search-controller
      operationId: suggest
      parameters:
      - name: vorname
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Kunde'
  /search/vorname:
    get:
      tags:
      - search-controller
      operationId: searchByVorname
      parameters:
      - name: vorname
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchResponseKunde'
  /search/nachname:
    get:
      tags:
      - search-controller
      operationId: searchByNachname
      parameters:
      - name: nachname
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchResponseKunde'
  /search/kurzname:
    get:
      tags:
      - search-controller
      operationId: searchByKurzname
      parameters:
      - name: kurzname
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchResponseKunde'
  /kunden:
    get:
      tags:
      - kunden-controller
      operationId: getKunden
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Kunde'
  /kunden/paged:
    get:
      tags:
      - kunden-controller
      operationId: getKunden_1
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageKunde'
components:
  schemas:
    Kunde:
      type: object
      properties:
        id:
          type: string
        kurzname:
          type: string
        personennummer:
          type: integer
          format: int64
        vorname:
          type: string
        nachname:
          type: string
        strasse:
          type: string
        ort:
          type: string
        postleitzahl:
          type: integer
          format: int32
        konten:
          type: string
    Pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/Sort'
        offset:
          type: integer
          format: int64
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
    SearchResponseKunde:
      type: object
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/Kunde'
        page:
          $ref: '#/components/schemas/PageMetadata'
    PageKunde:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Kunde'
        pageable:
          $ref: '#/components/schemas/Pageable'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
